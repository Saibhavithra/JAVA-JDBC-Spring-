
package com.returnship.training.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import javax.lang.model.element.Element;

public class Jdbcdemo1 {
	
	public static void main(String[] args){
		Connection con = null;
	//	 String tableName = "person1";
		  List<Person> personList = new ArrayList<>();
		  
		try{
			Class.forName("com.mysql.cj.jdbc.Driver");
		String url = "jdbc:mysql://localhost:3306/mars_sept";
		String userName ="root";
		String password ="Srisrianna111*";
		
		con = DriverManager.getConnection(url, userName, password);
	//	String sql = "CREATE TABLE person1 (name varchar(30), age varchar(30))";
 //  PreparedStatement myStmt = con.prepareStatement(sql);
 //  myStmt.executeUpdate();
		
   Statement stmt = con.createStatement();
   //Setting auto-commit false
  // con.setAutoCommit(false);
   
   
   //Statements to insert records
 //String insert1 = "INSERT INTO persons VALUES ('Amritha',  30)";
   //String insert2 = "INSERT INTO persons  VALUES ( 'SUMITHa',  25)";
  // String insert3 = "INSERT INTO persons  VALUES ('Sudhakar', 40)";
   //Adding the statements to batch
  // stmt.addBatch(insert1);
  // stmt.addBatch(insert2);
  // stmt.addBatch(insert3);
   //Executing the batch
   //stmt.executeBatch();
   //Saving the changes
  // con.commit();
   //System.out.println("Records inserted......");
	/*	PreparedStatement pstmt = con.prepareStatement("insert into persons values(?,?) ");
		pstmt.setString(1,"sai");
		pstmt.setInt(2,16);
		int i =pstmt.executeUpdate();
		System.out.println(i+ "records inserted");*/
   
 
       
     //  String query = "select * from persons";
     ResultSet rs = stmt.executeQuery();
   	//ResultSet rs = pstmt.executeQuery();
     //  rs = st.executeQuery(query);
       System.out.println("Records from persons database");
       while (rs.next()) {
         Person person = new Person();
         String name = rs.getString("name");
         String age = rs.getString("age");
         person.setName(name);
         person.setAge(age);
         personList.add(person);
        // personList.stream().filter(e -> e.getName().contains("Sumi")).map(e -> e.getAge()> 26).forEach(System.
        	//	 out::println);
     
       System.out.println("Name: " + name + " " + "age: " + age);
    
		  
      // personList.stream().filter(prod->prod.getName().contains("Sumi")).map(pre->pre+pre.getName()+" & HEAL").forEach(System.
       	// out::println);
       

       personList.stream().filter(prod->prod.getName().contains("Amri")).map(pre->pre+pre.getName()+" & HEALTH").forEach(System.out::println);
          
	
     }
       System.out.println(personList);}
		 
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			try {
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		
		}
	}
	


//public List<Person> getDataOfpersons() {
/*public List<Person> getDataOfpersons() {
  // create a list to store values
	  List<Person> personList = new ArrayList<>();
  try {

    String query = "select * from person";
	Connection con = null;
	Statement stmt = con.createStatement();
    stmt.executeQuery("");
     ResultSet rs = stmt.executeQuery(query);
    System.out.println("Records from persons database");
    while (rs.next()) {
      Person person = new Person();
      String name = rs.getString("name");
      String age = rs.getString("age");
      person.setName(name);
      person.setAge(age);
      personList.add(person);
      
      System.out.println("Name: " + name + " " + "age: " + age);
    }

  } catch(Exception ex) {
    System.out.println(ex);
  }
 // return personList;
   //List<Person> personListSorted = new ArrayList<Person>();
   
  /*Comparator<Person>  NameCommparator = Comparator.comparing(Person::getName);
  personListSorted = personList.stream().sorted(NameCommparator).collect(Collectors.toList());
  return personListSorted;*/

//sorting on descending order
/*Comparator<Person> AgeCommparator = Comparator.comparing(Person::getAge);
personListSorted = personList.stream().sorted(AgeCommparator.reversed()).collect(Collectors.toList());
return personListSorted;*/
  
// Long count = personList.stream().filter(e -> e.getName().contains("Sumi")).map(e -> e.getAge()> 26);
//System.out.println(count);

 // personList.stream().filter(prod->prod.getName().contains("Sumi")).map(pre->pre+pre.getName()+" & HEAL").forEach(System.
//out::println);
/*long count = empList.stream().filter(e -> e.getName().contains("kumar"))
.filter(e -> e.getAge() > 26)
.peek(System.out::println)
.count();*/
//return personList;

}
